// <auto-generated />
using System;
using Cookbook.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cookbook.Infrastructure.Migrations
{
    [DbContext(typeof(CookbookContext))]
    [Migration("20250925131305_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cookbook.SharedData.Entities.Category", b =>
                {
                    b.Property<short>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<short>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("categories_pkey");

                    b.HasIndex(new[] { "Name" }, "categories_name_key")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Ingredient", b =>
                {
                    b.Property<short>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("ingredient_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<short>("IngredientId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("IngredientId")
                        .HasName("ingredients_pkey");

                    b.HasIndex(new[] { "Name" }, "ingredients_name_key")
                        .IsUnique();

                    b.ToTable("ingredients", (string)null);
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RecipeId"));

                    b.Property<TimeSpan>("CookingDuration")
                        .HasColumnType("interval")
                        .HasColumnName("cooking_duration");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_id");

                    b.Property<short>("Difficulty")
                        .HasColumnType("smallint")
                        .HasColumnName("difficulty");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_path");

                    b.Property<TimeSpan>("PreparationDuration")
                        .HasColumnType("interval")
                        .HasColumnName("preparation_duration");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("RecipeId")
                        .HasName("recipes_pkey");

                    b.HasIndex("CreatorId");

                    b.ToTable("recipes", (string)null);
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.RecipesIngredient", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<short>("IngredientId")
                        .HasColumnType("smallint")
                        .HasColumnName("ingredient_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("unit");

                    b.HasKey("RecipeId", "IngredientId")
                        .HasName("recipes_ingredients_pkey");

                    b.HasIndex("IngredientId");

                    b.ToTable("recipes_ingredients", (string)null);
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Review", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("integer")
                        .HasColumnName("reviewer_id");

                    b.Property<string>("Impression")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("impression");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.HasKey("RecipeId", "ReviewerId")
                        .HasName("reviews_pkey");

                    b.HasIndex("ReviewerId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Step", b =>
                {
                    b.Property<short>("StepNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("step_number");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("instruction");

                    b.Property<bool>("IsCooking")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cooking");

                    b.HasKey("StepNumber", "RecipeId")
                        .HasName("steps_pkey");

                    b.HasIndex("RecipeId");

                    b.ToTable("steps", (string)null);
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("UserId"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("character varying(72)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RecipesCategory", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasColumnName("recipe_id");

                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("category_id");

                    b.HasKey("RecipeId", "CategoryId")
                        .HasName("recipes_categories_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("recipes_categories", (string)null);
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Recipe", b =>
                {
                    b.HasOne("Cookbook.SharedData.Entities.User", "Creator")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("recipes_creator_id_fkey");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.RecipesIngredient", b =>
                {
                    b.HasOne("Cookbook.SharedData.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipesIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recipes_ingredients_ingredient_id_fkey");

                    b.HasOne("Cookbook.SharedData.Entities.Recipe", "Recipe")
                        .WithMany("RecipesIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recipes_ingredients_recipe_id_fkey");

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Review", b =>
                {
                    b.HasOne("Cookbook.SharedData.Entities.Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_recipe_id_fkey");

                    b.HasOne("Cookbook.SharedData.Entities.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_reviewer_id_fkey");

                    b.Navigation("Recipe");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Step", b =>
                {
                    b.HasOne("Cookbook.SharedData.Entities.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("steps_recipe_id_fkey");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipesCategory", b =>
                {
                    b.HasOne("Cookbook.SharedData.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recipes_categories_category_id_fkey");

                    b.HasOne("Cookbook.SharedData.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recipes_categories_recipe_id_fkey");
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipesIngredients");
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.Recipe", b =>
                {
                    b.Navigation("RecipesIngredients");

                    b.Navigation("Reviews");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Cookbook.SharedData.Entities.User", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
